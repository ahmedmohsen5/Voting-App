pipeline {
    agent any
    environment {
        // Define your services with build and test commands per language
        SERVICES = '''[
            [name: 'worker', buildCmd: 'mvn clean package', testCmd: 'mvn test'],  // Java with Maven
            [name: 'vote', buildCmd: 'npm install', testCmd: 'npm test'],           // Node.js with npm
            [name: 'result', buildCmd: 'go build ./...', testCmd: 'go test ./...'],  // Go with Go toolchain
        ]'''
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the code...'
                git url: 'https://github.com/ahmedmohsen5/Voting-App.git', branch: 'main'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Define the services within the script block as a Groovy list
                    def services = [
                        [name: 'worker', buildCmd: 'mvn clean package', testCmd: 'mvn test'],  // Java with Maven
                        [name: 'vote', buildCmd: 'npm install', testCmd: 'npm test'],           // Node.js with npm
                        [name: 'result', buildCmd: 'go build ./...', testCmd: 'go test ./...']  // Go with Go toolchain
                    ]

                    // Build Docker images for each microservice
                    for (service in services) {
                        dir(service.name) {
                            echo "Building Docker image for ${service.name}..."
                            //sh "docker build -t your-registry/${service.name}:${env.BUILD_NUMBER} ."
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests...'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying the application...'
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}